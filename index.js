/**
 * Original property list
 * @see https://github.com/constverum/stylelint-config-rational-order/blob/master/index.js
 */

const addEmptyLineBefore = (properties) => {
    return {
        emptyLineBefore: 'always',
        properties,
    };
};

const special = [
    'composes',
];

const visibility = [
    'display',
    'visibility',
    'opacity',
];

const positioning = [
    'position',
    'top',
    'right',
    'bottom',
    'left',
    'z-index',
];

const boxmodel = [
    'overflow',
    'overflow-x',
    'overflow-y',
    'box-sizing',
    'flex',
    'flex-grow',
    'flex-shrink',
    'flex-basis',
    'flex-flow',
    'flex-direction',
    'flex-wrap',
    'justify-content',
    'align-content',
    'align-items',
    'align-self',
    'order',
    'float',
    'clear',
    'width',
    'min-width',
    'max-width',
    'height',
    'min-height',
    'max-height',
    'margin',
    'margin-top',
    'margin-right',
    'margin-bottom',
    'margin-left',
    'padding',
    'padding-top',
    'padding-right',
    'padding-bottom',
    'padding-left',
];

const typography = [
    'color',
    'font',
    'font-weight',
    'font-size',
    'font-family',
    'font-style',
    'font-variant',
    'font-size-adjust',
    'font-stretch',
    'font-effect',
    'font-emphasize',
    'font-emphasize-position',
    'font-emphasize-style',
    'font-smooth',
    'line-height',
    'direction',
    'letter-spacing',
    'white-space',
    'text-align',
    'text-align-last',
    'text-transform',
    'text-decoration',
    'text-emphasis',
    'text-emphasis-color',
    'text-emphasis-style',
    'text-emphasis-position',
    'text-indent',
    'text-justify',
    'text-outline',
    'text-wrap',
    'text-overflow',
    'text-overflow-ellipsis',
    'text-overflow-mode',
    'text-orientation',
    'text-shadow',
    'vertical-align',
    'word-wrap',
    'word-break',
    'word-spacing',
    'overflow-wrap',
    'tab-size',
    'hyphens',
    'unicode-bidi',
    'columns',
    'column-count',
    'column-fill',
    'column-gap',
    'column-rule',
    'column-rule-color',
    'column-rule-style',
    'column-rule-width',
    'column-span',
    'column-width',
    'page-break-after',
    'page-break-before',
    'page-break-inside',
    'src',
];

const visual = [
    'list-style',
    'list-style-position',
    'list-style-type',
    'list-style-image',
    'table-layout',
    'empty-cells',
    'caption-side',
    'background',
    'background-color',
    'background-image',
    'background-repeat',
    'background-position',
    'background-position-x',
    'background-position-y',
    'background-size',
    'background-clip',
    'background-origin',
    'background-attachment',
    'background-blend-mode',
    'box-decoration-break',
    'border',
    'border-width',
    'border-style',
    'border-color',
    'border-top',
    'border-top-width',
    'border-top-style',
    'border-top-color',
    'border-right',
    'border-right-width',
    'border-right-style',
    'border-right-color',
    'border-bottom',
    'border-bottom-width',
    'border-bottom-style',
    'border-bottom-color',
    'border-left',
    'border-left-width',
    'border-left-style',
    'border-left-color',
    'border-radius',
    'border-top-left-radius',
    'border-top-right-radius',
    'border-bottom-right-radius',
    'border-bottom-left-radius',
    'border-image',
    'border-image-source',
    'border-image-slice',
    'border-image-width',
    'border-image-outset',
    'border-image-repeat',
    'border-collapse',
    'border-spacing',
    'outline',
    'outline-width',
    'outline-style',
    'outline-color',
    'outline-offset',
    'box-shadow',
    'transform',
    'transform-origin',
    'transform-style',
    'backface-visibility',
    'perspective',
    'perspective-origin',
    'cursor',
    'filter',
    'backdrop-filter',
];

const animation = [
    'transition',
    'transition-delay',
    'transition-timing-function',
    'transition-duration',
    'transition-property',
    'animation',
    'animation-name',
    'animation-duration',
    'animation-play-state',
    'animation-timing-function',
    'animation-delay',
    'animation-iteration-count',
    'animation-direction',
    'animation-fill-mode',
];

const misc = [
    'appearance',
    'clip',
    'clip-path',
    'counter-reset',
    'counter-increment',
    'resize',
    'user-select',
    'nav-index',
    'nav-up',
    'nav-right',
    'nav-down',
    'nav-left',
    'pointer-events',
    'quotes',
    'touch-action',
    'will-change',
    'zoom',
    'fill',
    'fill-rule',
    'clip-rule',
    'stroke',
];

const idiomaticOrder = [
    addEmptyLineBefore([
        ...special,
        ...visibility,
        ...positioning,
        ...boxmodel,
    ]),
    addEmptyLineBefore([
        ...typography,
        ...visual,
    ]),
    addEmptyLineBefore([
        ...animation,
        ...misc,
    ]),
];


module.exports = {
    plugins: [
        'stylelint-scss',
        'stylelint-order',
    ],
    rules: {
        'at-rule-blacklist': ['debug'],
        'at-rule-no-vendor-prefix': true,
        'at-rule-empty-line-before': [
            'always',
            {
                ignore: [
                    'after-comment',
                ],
                except: [
                    'first-nested',
                    'blockless-after-same-name-blockless',
                ],
                ignoreAtRules: [
                    'import',
                ],
            },
        ],
        'block-no-empty': true,
        'block-opening-brace-space-before': 'always',
        'block-closing-brace-newline-after': [
            'always',
            {
                ignoreAtRules: [
                    'if',
                    'else',
                ],
            },
        ],
        'color-hex-case': 'lower',
        'color-hex-length': 'short',
        'color-named': 'never',
        'color-no-invalid-hex': true,
        'declaration-bang-space-after': 'never',
        'declaration-bang-space-before': 'always',
        'declaration-block-semicolon-newline-after': 'always',
        'declaration-block-semicolon-space-before': 'never',
        'declaration-block-single-line-max-declarations': 1,
        'declaration-block-trailing-semicolon': 'always',
        'declaration-colon-space-after': 'always-single-line',
        'declaration-colon-space-before': 'never',
        'declaration-property-value-blacklist': {
            '/^border/': ['none'],
        },
        'font-family-name-quotes': 'always-where-required',
        'font-weight-notation': 'numeric',
        'function-comma-space-after': 'always-single-line',
        'function-parentheses-space-inside': 'never',
        'function-url-quotes': 'always',
        'function-name-case': [
            'lower',
            {
                ignoreFunctions: ['/^(#{)?[a-z]+([a-zA-Z0-9]+[a-z0-9]+)?$/'],
            },
        ],
        indentation: 2,
        'length-zero-no-unit': true,
        'max-nesting-depth': 3,
        'max-empty-lines': 1,
        'media-feature-name-no-vendor-prefix': true,
        'media-feature-parentheses-space-inside': 'never',
        'no-missing-end-of-source-newline': true,
        'number-leading-zero': 'never',
        'number-no-trailing-zeros': true,
        'order/order': [
            [
                'custom-properties',
                'dollar-variables',
                {
                    type: 'at-rule',
                    name: 'include',
                    parameter: 'respondTo',
                },
                {
                    type: 'at-rule',
                    hasBlock: false,
                },
                {
                    type: 'at-rule',
                    hasBlock: true,
                },
                'declarations',
                'rules',
            ],
            {
                unspecified: 'ignore',
            },
        ],
        'order/properties-order': [
            idiomaticOrder,
            {
                unspecified: 'bottom',
            },
        ],
        'property-no-unknown': [
            true,
            {
                ignoreProperties: ['composes'],
            },
        ],
        'property-no-vendor-prefix': true,
        'rule-empty-line-before': [
            'always-multi-line',
            {
                except: ['first-nested'],
                ignore: [
                    'after-comment',
                    'inside-block',
                ],
            },
        ],
        'scss/at-extend-no-missing-placeholder': true,
        'scss/at-function-pattern': '^[a-z]+([a-zA-Z0-9]+[a-z0-9]+)?$',
        'scss/at-import-no-partial-leading-underscore': true,
        'scss/at-import-partial-extension-blacklist': ['scss'],
        'scss/at-mixin-pattern': '^[a-z]+([a-zA-Z0-9]+[a-z0-9]+)?$',
        'scss/dollar-variable-colon-space-after': 'always',
        'scss/dollar-variable-colon-space-before': 'never',
        'scss/dollar-variable-pattern': [
            '^(([a-z0-9]+([A-Z][a-z0-9])*)*)+(_([a-z0-9]+([A-Z][a-z0-9])*)*){0,2}(__([a-z0-9]+([A-Z][a-z0-9])*)*)?$',
            {
                message:
                    'Should be in this format [block_element]_property__modifier!',
            },
        ],
        'scss/percent-placeholder-pattern': [
            '^$',
            {
                message: 'Placeholders should not be used, use mixin instead!',
            },
        ],
        'scss/operator-no-unspaced': true,
        'scss/selector-no-redundant-nesting-selector': true,
        'selector-class-pattern': [
            '^(([a-z0-9]+([A-Z][a-z0-9])*)*)+(_([a-z0-9]+([A-Z][a-z0-9])*)*)?(__([a-z0-9]+([A-Z][a-z0-9])*)*)?$',
            {
                resolveNestedSelectors: true,
                message:
                    'Should be in this format block_element__modifier!',
            },
        ],
        'selector-list-comma-newline-after': 'always',
        'selector-max-compound-selectors': 3,
        'selector-max-id': 0,
        'selector-no-qualifying-type': true,
        'selector-no-vendor-prefix': true,
        'selector-pseudo-element-colon-notation': 'double',
        'selector-pseudo-class-no-unknown': [
            true,
            {
                ignorePseudoClasses: 'global',
            },
        ],
        'selector-pseudo-element-no-unknown': true,
        'shorthand-property-no-redundant-values': true,
        'string-quotes': 'single',
        'value-no-vendor-prefix': true,
    },
};